% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rankgm.R
\name{RankGeneModules}
\alias{RankGeneModules}
\title{Rank gene-expression modules}
\usage{
RankGeneModules(
  object,
  chunk.size = 500,
  verbose = TRUE,
  parallel = FALSE,
  overwrite = FALSE,
  BPPARAM = BiocParallel::bpparam()
)
}
\arguments{
\item{object}{Loom file, provided as an H5File-class object, with read/write access. Must contain gene-count data
in the primary `matrix`. See `LoomPy` and `hdf5r` for more details.}

\item{chunk.size}{Specifies the maximum number of single cells to load into memory at once. Default is 500.}

\item{verbose}{Specifies whether to print update messages during the fitting of mixture models. Default is TRUE.}

\item{parallel}{Specifies whether to parallelize the fitting of mixture models for each batch. Default is FALSE.}

\item{overwrite}{Specifies whether to overwrite any existing results if they are found. Default is FALSE.}

\item{BPPARAM}{Specifies the back-end to use for parallelization. See `bpparam` in `BiocParallel` for more details.}
}
\value{
Returns an H5File-class object with an updated Loom file containing a `rankgm` layer with the inferred single-
  cell-specific gene rankings, and a column attribute `rankgm_success` indicating the success (1) or failure (0) of the
  model-fitting procedure for each cell. The ranks are returned as all zeros if the fitting procedure is unsuccessful.
}
\description{
Infers gene expression-module rankings by fitting negative binomial mixture models to gene-count data in single cells.
Gene-module rankings are then used to uniquely rank-order genes for each cell in the dataset.
}
\examples{
\dontrun{
pbmc.h5 <- H5File$new("pbmc3k.loom", mode="r+")
pbmc.h5 <- RankGeneModules(pbmc.h5, overwrite = TRUE)
pbmc.h5$close_all()
}

}
